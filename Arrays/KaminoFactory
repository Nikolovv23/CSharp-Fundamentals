// The clone factory in Kamino got another order to clone troops. But this time you are tasked to find the best DNA sequence to use in the production. 
// You will receive the DNA length and until you receive the command "Clone them!", you will be receiving a DNA sequence of ones and zeroes, 
// split by '!' (one or several).
// You should select the sequence with the longest subsequence of ones. If there are several sequences with the same length of the subsequence of ones,
// print the one with the leftmost starting index, if there are several sequences with the same length and starting index, select the sequence with the
// greater sum of its elements.
// After you receive the last command "Clone them!" you should print the collected information in the following format:
// "Best DNA sample {bestSequenceIndex} with sum: {bestSequenceSum}."
// "{DNA sequence, joined by space}"
// Input / Constraints
// •	The first line holds the length of the sequences – integer in the range [1…100].
// •	On the next lines, until you receive "Clone them!", you will be receiving sequences (at least one) of ones and zeroes, split by '!' (one or several).
//  Output
// The output should be printed on the console and consists of two lines in the following format:
// "Best DNA sample {bestSequenceIndex} with sum: {bestSequenceSum}."
// "{DNA sequence, joined by space}"


// Example:  Input: 5                        Output: Best DNA sample 2 with sum: 2.
//                  1!0!1!1!0                        0 1 1 0 0
//                  0!1!1!0!0
//                  Clone them!


namespace KaminoFactory
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int DNALength = int.Parse(Console.ReadLine());
            int length = 0;
            int startIndex = -1;
            int row = 0;
            int currentRow = 1;
            int sum = 0;
            int[] DNA = new int[DNALength];

            while (true)
            {
                string line = Console.ReadLine();
                if (line == "Clone them!")
                {
                    break;
                }
                int[] currentDNA = line 
                    .Split("!",StringSplitOptions.RemoveEmptyEntries)
                    .Select(int.Parse)
                    .ToArray();

                int currentSum = 0;

                for (int i = 0; i < currentDNA.Length; i++)
                {
                    if (currentDNA[i] == 1 )
                    {
                        currentSum++;
                    }
                }
                if (currentRow == 1)
                {
                    DNA = currentDNA;
                        row = currentRow;
                        sum = currentSum;
                }
                int currentStartIndex = -1;
                int currentLength = 0;
                bool isFound = false;

                for (int i = 0; i < currentDNA.Length; i++)
                {
                    if (currentDNA[i] == 1)
                    {
                        if (!isFound)
                        {

                            currentStartIndex = i;

                        }
                        currentLength++;

                        if (currentLength > length)
                        {
                            length = currentLength;
                            startIndex = currentStartIndex;
                            sum = currentSum;
                            row = currentRow;

                            DNA = currentDNA;
                        }
                        else if (currentLength == length)
                        {
                            if (currentStartIndex < startIndex)
                            {
                                length = currentLength;
                                startIndex = currentStartIndex;
                                sum = currentSum;
                                row = currentRow;

                                DNA = currentDNA;
                            }
                        }
                        else if (currentSum > sum)
                        {
                            length = currentLength;
                            startIndex = currentStartIndex;
                            sum = currentSum;
                            row = currentRow;

                            DNA = currentDNA;
                        }
                    }
                    else
                    {
                        currentStartIndex = -1;
                        currentLength = 0;
                        isFound = false;
                    }
                }
                currentRow++;
            }
            Console.WriteLine($"Best DNA sample {row} with sum: {sum}.");
            Console.WriteLine(string.Join(" ", DNA));
        }
    }
}
