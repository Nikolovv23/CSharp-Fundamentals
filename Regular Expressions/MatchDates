// Write a program, which matches a date in the format "dd{separator}MMM{separator}yyyy". Use named capturing groups in your regular expression.
// Compose the Regular Expression
// Every valid date has the following characteristics:
// •	Always starts with two digits, followed by a separator.
// •	After that, it has one uppercase and two lowercase letters (e.g. Jan, Mar).
// •	After that, it has a separator and exactly 4 digits (for the year).
// •	The separator could be either of three things: a period('. '), a hyphen('-') or a forward-slash ('/').
// •	The separator needs to be the same for the whole date (e.g. 13.03.2016 is valid, 13.03/2016 is NOT). Use a group backreference to check for this.

// Print each date in the following format: "Day: {day}, Month: {month}, Year: {year}", each on a new line.
// Input: 13/Jul/1928, 10-Nov-1934, , 01/Jan-1951,f 25.Dec.1937 23/09/1973, 1/Feb/2016
// Output: Day: 13, Month: Jul, Year: 1928
//         Day: 10, Month: Nov, Year: 1934
//         Day: 25, Month: Dec, Year: 1937


namespace MatchDates
{
    internal class Program
    {
        static void Main(string[] args)
        {
           string input = Console.ReadLine();
                string pattern = @"(?<date>\d{2})(?<separator>\.|-|/)(?<month>[A-Z][a-z]{2})\2(?<year>\d{4})";
                Regex regex = new Regex(pattern);
                MatchCollection matches = regex.Matches(input);

           foreach (Match match in matches)
            {
                string day = match.Groups["date"].Value;
                string month = match.Groups["month"].Value;
                string year = match.Groups["year"].Value;

                Console.WriteLine($"Day: {day}, Month: {month}, Year: {year}");
            }
        }
    }
}
